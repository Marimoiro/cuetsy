Verifies defaults from structs (interfaces) work

- Primitives are inlined
- Named types use references to the respective default value

-- cue  --
package cuetsy

AType: "foo" | "bar" | *"baz" @cuetsy(kind="type")
ATypedList: [...int] | *[1,2] @cuetsy(kind="type")

Foo: {
  Bar: string | *"ohai"
  Baz: int | *4
  C: AType
  I1_TypedList: [...int] | *[1,2]
  I2_TypedList: ATypedList
} @cuetsy(kind="interface")

NestedFoo: {
  Bar?: string | *"ohai"
  Foo: {
    Bar: string | *"ohai"
    Baz: AType
  }
} @cuetsy(kind="interface")

-- ts  --

export type AType = ('foo' | 'bar' | 'baz');

export const defaultAType: AType = 'baz';

export type ATypedList = Array<number>;

export const defaultATypedList: ATypedList = [1, 2];

export interface Foo {
  Bar: string;
  Baz: number;
  C: AType;
  I1_TypedList: Array<number>;
  I2_TypedList: ATypedList;
}

export const defaultFoo: Partial<Foo> = {
  Bar: 'ohai',
  Baz: 4,
  C: defaultAType,
  I1_TypedList: [1, 2],
  I2_TypedList: defaultATypedList,
};

export interface NestedFoo {
  Bar?: string;
  Foo: {
    Bar: string;
    Baz: AType;
  };
}

export const defaultNestedFoo: Partial<NestedFoo> = {
  Bar: 'ohai',
};
